/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.opcua.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum OpcuaNodeIdServicesVariableLog {
  LogObjectType_GetRecords_InputArguments((int) 19354L),
  LogObjectType_GetRecords_OutputArguments((int) 19355L),
  LogObjectType_MaxRecords((int) 19356L),
  LogObjectType_MaxStorageDuration((int) 19357L),
  LogObjectType_MinimumSeverity((int) 19744L),
  LogRecordMask_OptionSetValues((int) 19750L);
  private static final Map<Integer, OpcuaNodeIdServicesVariableLog> map;

  static {
    map = new HashMap<>();
    for (OpcuaNodeIdServicesVariableLog value : OpcuaNodeIdServicesVariableLog.values()) {
      map.put((int) value.getValue(), value);
    }
  }

  private final int value;

  OpcuaNodeIdServicesVariableLog(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static OpcuaNodeIdServicesVariableLog enumForValue(int value) {
    return map.get(value);
  }

  public static Boolean isDefined(int value) {
    return map.containsKey(value);
  }
}
